name: Deploy LensLink

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ closed ]

jobs:
  deploy:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, zip
          coverage: none

      - name: Install Backend Dependencies
        working-directory: ./backend
        run: composer install --no-dev --prefer-dist --no-scripts --no-progress

      - name: Create .env file
        working-directory: ./backend
        run: |
          echo "APP_NAME=LensLink" > .env
          echo "APP_ENV=production" >> .env
          echo "APP_KEY=" >> .env
          echo "APP_DEBUG=false" >> .env
          echo "APP_URL=https://api.lenslink.mionet.top" >> .env
          echo "DB_CONNECTION=mysql" >> .env
          echo "DB_HOST=127.0.0.1" >> .env
          echo "DB_PORT=3306" >> .env
          echo "DB_DATABASE=lenslink" >> .env
          echo "DB_USERNAME=lenslink_user" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace

      - name: Adding Known Hosts
        run: ssh-keyscan -p ${{ secrets.SSH_PORT || 22 }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy Frontend
        run: |
          echo "Deploying frontend files..."
          scp -P ${{ secrets.SSH_PORT || 22 }} -r frontend/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/1panel/apps/openresty/openresty/www/sites/lenslink.mionet.top/index/

      - name: Deploy Backend
        run: |
          echo "Preparing backend files..."
          mkdir -p ~/backend-deploy
          cp -r backend/* ~/backend-deploy/
          
          rm -rf ~/backend-deploy/storage/app/*
          rm -rf ~/backend-deploy/storage/framework/cache/*
          rm -rf ~/backend-deploy/storage/framework/sessions/*
          rm -rf ~/backend-deploy/storage/framework/views/*
          rm -rf ~/backend-deploy/storage/logs/*
          
          echo "Deploying backend files..."
          scp -P ${{ secrets.SSH_PORT || 22 }} -r ~/backend-deploy/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/1panel/apps/openresty/openresty/www/sites/api.lenslink.mionet.top/index/

      - name: Post-deploy Configuration
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT || 22 }}
          script: |
            OPENRESTY_CONTAINER=$(docker ps | grep openresty | awk '{print $1}')
            
            BACKEND_ROOT="/opt/1panel/apps/openresty/openresty/www/sites/api.lenslink.mionet.top/index"
            
            cd $BACKEND_ROOT
            
            [ ! -f .env ] && cp .env.example .env

            php artisan key:generate --force

            php artisan config:clear
            php artisan cache:clear
            php artisan route:clear
            php artisan view:clear
            php artisan optimize
            
            sudo chown -R www-data:www-data $BACKEND_ROOT/storage
            sudo chmod -R 775 $BACKEND_ROOT/storage
            sudo chown -R www-data:www-data $BACKEND_ROOT/bootstrap/cache
            sudo chmod -R 775 $BACKEND_ROOT/bootstrap/cache
            
            if [ ! -z "$OPENRESTY_CONTAINER" ]; then
              echo "Reloading OpenResty configuration..."
              docker exec $OPENRESTY_CONTAINER nginx -s reload
            fi
            
            if [ -f "/opt/1panel/apps/php/sbin/php-fpm" ]; then
              echo "Refreshing PHP-FPM..."
              sudo /opt/1panel/apps/php/sbin/php-fpm -s reload
            fi
            
            echo "Deployment completed successfully!"